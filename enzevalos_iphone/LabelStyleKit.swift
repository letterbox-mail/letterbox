//
//  LabelStyleKit.swift
//  enzevalos
//
//  Created by Joscha on 05.01.17.
//  Copyright Â© 2017 FU Berlin. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class LabelStyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawHome(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 28, height: 28), resizing: ResizingBehavior = .AspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        CGContextSaveGState(context)
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 28, height: 28), target: targetFrame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        CGContextScaleCTM(context, resizedFrame.width / 28, resizedFrame.height / 28)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// home.svg Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 21.2, y: 13))
        bezierPath.addLineToPoint(CGPoint(x: 7.1, y: 13))
        bezierPath.addCurveToPoint(CGPoint(x: 4.3, y: 15.8), controlPoint1: CGPoint(x: 5.5, y: 13), controlPoint2: CGPoint(x: 4.3, y: 14.3))
        bezierPath.addLineToPoint(CGPoint(x: 4.3, y: 24.6))
        bezierPath.addCurveToPoint(CGPoint(x: 7.1, y: 27.4), controlPoint1: CGPoint(x: 4.3, y: 26.2), controlPoint2: CGPoint(x: 5.6, y: 27.4))
        bezierPath.addLineToPoint(CGPoint(x: 21.2, y: 27.4))
        bezierPath.addCurveToPoint(CGPoint(x: 24, y: 24.6), controlPoint1: CGPoint(x: 22.8, y: 27.4), controlPoint2: CGPoint(x: 24, y: 26.1))
        bezierPath.addLineToPoint(CGPoint(x: 24, y: 15.8))
        bezierPath.addCurveToPoint(CGPoint(x: 21.2, y: 13), controlPoint1: CGPoint(x: 24.1, y: 14.3), controlPoint2: CGPoint(x: 22.8, y: 13))
        bezierPath.closePath()
        black.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 14.3, y: 2.4))
        bezier2Path.addLineToPoint(CGPoint(x: 25.8, y: 14.2))
        bezier2Path.addLineToPoint(CGPoint(x: 2.5, y: 14.2))
        bezier2Path.addLineToPoint(CGPoint(x: 14.3, y: 2.4))
        bezier2Path.closePath()
        black.setFill()
        bezier2Path.fill()
        black.setStroke()
        bezier2Path.lineWidth = 3
        bezier2Path.lineJoinStyle = .Round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 21.9, y: 11.6))
        bezier3Path.addLineToPoint(CGPoint(x: 20.8, y: 11.6))
        bezier3Path.addCurveToPoint(CGPoint(x: 19.9, y: 10.7), controlPoint1: CGPoint(x: 20.3, y: 11.6), controlPoint2: CGPoint(x: 19.9, y: 11.2))
        bezier3Path.addLineToPoint(CGPoint(x: 19.9, y: 5.7))
        bezier3Path.addCurveToPoint(CGPoint(x: 20.8, y: 4.8), controlPoint1: CGPoint(x: 19.9, y: 5.2), controlPoint2: CGPoint(x: 20.3, y: 4.8))
        bezier3Path.addLineToPoint(CGPoint(x: 21.9, y: 4.8))
        bezier3Path.addCurveToPoint(CGPoint(x: 22.8, y: 5.7), controlPoint1: CGPoint(x: 22.4, y: 4.8), controlPoint2: CGPoint(x: 22.8, y: 5.2))
        bezier3Path.addLineToPoint(CGPoint(x: 22.8, y: 10.8))
        bezier3Path.addCurveToPoint(CGPoint(x: 21.9, y: 11.6), controlPoint1: CGPoint(x: 22.7, y: 11.2), controlPoint2: CGPoint(x: 22.3, y: 11.6))
        bezier3Path.closePath()
        black.setFill()
        bezier3Path.fill()
        
        CGContextRestoreGState(context)

    }

    public dynamic class func drawWork(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 251, height: 227), resizing: ResizingBehavior = .AspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        CGContextSaveGState(context)
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 251, height: 227), target: targetFrame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        CGContextScaleCTM(context, resizedFrame.width / 251, resizedFrame.height / 227)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let white = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// work.svg Group
        //// Group 2
        //// Group 3
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 228.24, y: 40.4))
        bezierPath.addLineToPoint(CGPoint(x: 22.88, y: 40.4))
        bezierPath.addCurveToPoint(CGPoint(x: 1.7, y: 62.16), controlPoint1: CGPoint(x: 10.91, y: 40.4), controlPoint2: CGPoint(x: 1.7, y: 49.86))
        bezierPath.addLineToPoint(CGPoint(x: 1.7, y: 203.14))
        bezierPath.addCurveToPoint(CGPoint(x: 22.88, y: 224.9), controlPoint1: CGPoint(x: 1.7, y: 215.44), controlPoint2: CGPoint(x: 10.91, y: 224.9))
        bezierPath.addLineToPoint(CGPoint(x: 227.32, y: 224.9))
        bezierPath.addCurveToPoint(CGPoint(x: 248.5, y: 203.14), controlPoint1: CGPoint(x: 239.29, y: 224.9), controlPoint2: CGPoint(x: 248.5, y: 215.44))
        bezierPath.addLineToPoint(CGPoint(x: 248.5, y: 61.22))
        bezierPath.addCurveToPoint(CGPoint(x: 228.24, y: 40.4), controlPoint1: CGPoint(x: 248.5, y: 49.86), controlPoint2: CGPoint(x: 239.29, y: 40.4))
        bezierPath.closePath()
        black.setFill()
        bezierPath.fill()






        //// Group 4
        //// Group 5
        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 138.78, y: 9.8))
        bezier2Path.addLineToPoint(CGPoint(x: 112.52, y: 9.8))
        bezier2Path.addCurveToPoint(CGPoint(x: 88.8, y: 36.7), controlPoint1: CGPoint(x: 98.97, y: 9.8), controlPoint2: CGPoint(x: 88.8, y: 22.29))
        bezier2Path.addLineToPoint(CGPoint(x: 88.8, y: 58.8))
        bezier2Path.addCurveToPoint(CGPoint(x: 112.52, y: 85.7), controlPoint1: CGPoint(x: 88.8, y: 74.17), controlPoint2: CGPoint(x: 99.81, y: 85.7))
        bezier2Path.addLineToPoint(CGPoint(x: 138.78, y: 85.7))
        bezier2Path.addCurveToPoint(CGPoint(x: 162.5, y: 58.8), controlPoint1: CGPoint(x: 152.33, y: 85.7), controlPoint2: CGPoint(x: 162.5, y: 73.21))
        bezier2Path.addLineToPoint(CGPoint(x: 162.5, y: 36.7))
        bezier2Path.addCurveToPoint(CGPoint(x: 138.78, y: 9.8), controlPoint1: CGPoint(x: 162.5, y: 22.29), controlPoint2: CGPoint(x: 151.49, y: 9.8))
        bezier2Path.closePath()
        black.setStroke()
        bezier2Path.lineWidth = 15
        bezier2Path.stroke()






        //// Group 6
        //// Group 7
        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPoint(x: 130.23, y: 120.7))
        bezier3Path.addCurveToPoint(CGPoint(x: 2, y: 105), controlPoint1: CGPoint(x: 56.31, y: 120.7), controlPoint2: CGPoint(x: 2.92, y: 105))
        bezier3Path.addLineToPoint(CGPoint(x: 1.8, y: 104.76))
        bezier3Path.addLineToPoint(CGPoint(x: 1.8, y: 95.9))
        bezier3Path.addLineToPoint(CGPoint(x: 2, y: 96))
        bezier3Path.addCurveToPoint(CGPoint(x: 248.58, y: 95.9), controlPoint1: CGPoint(x: 2.92, y: 96), controlPoint2: CGPoint(x: 127.54, y: 131.33))
        bezier3Path.addLineToPoint(CGPoint(x: 248.5, y: 95.9))
        bezier3Path.addLineToPoint(CGPoint(x: 248.5, y: 104.76))
        bezier3Path.addLineToPoint(CGPoint(x: 248.58, y: 104.76))
        bezier3Path.addCurveToPoint(CGPoint(x: 130.23, y: 120.7), controlPoint1: CGPoint(x: 207, y: 118.04), controlPoint2: CGPoint(x: 167.19, y: 120.7))
        bezier3Path.closePath()
        white.setFill()
        bezier3Path.fill()






        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 125.1, y: 139.23))
        bezier4Path.addLineToPoint(CGPoint(x: 125.1, y: 139.23))
        bezier4Path.addCurveToPoint(CGPoint(x: 114.05, y: 128.06), controlPoint1: CGPoint(x: 118.65, y: 139.23), controlPoint2: CGPoint(x: 114.05, y: 134.58))
        bezier4Path.addLineToPoint(CGPoint(x: 114.05, y: 105.71))
        bezier4Path.addCurveToPoint(CGPoint(x: 125.1, y: 94.54), controlPoint1: CGPoint(x: 114.05, y: 99.19), controlPoint2: CGPoint(x: 118.65, y: 94.54))
        bezier4Path.addLineToPoint(CGPoint(x: 125.1, y: 94.54))
        bezier4Path.addCurveToPoint(CGPoint(x: 136.15, y: 105.71), controlPoint1: CGPoint(x: 131.55, y: 94.54), controlPoint2: CGPoint(x: 136.15, y: 99.19))
        bezier4Path.addLineToPoint(CGPoint(x: 136.15, y: 128.06))
        bezier4Path.addCurveToPoint(CGPoint(x: 125.1, y: 139.23), controlPoint1: CGPoint(x: 136.15, y: 134.58), controlPoint2: CGPoint(x: 130.63, y: 139.23))
        bezier4Path.closePath()
        white.setFill()
        bezier4Path.fill()
        
        CGContextRestoreGState(context)

    }

    public dynamic class func drawOther(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 86, height: 82), resizing: ResizingBehavior = .AspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        CGContextSaveGState(context)
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 86, height: 82), target: targetFrame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        CGContextScaleCTM(context, resizedFrame.width / 86, resizedFrame.height / 82)


        //// Color Declarations
        let black = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.moveToPoint(CGPoint(x: 43, y: 1))
        starPath.addLineToPoint(CGPoint(x: 55.19, y: 28.22))
        starPath.addLineToPoint(CGPoint(x: 84.85, y: 31.4))
        starPath.addLineToPoint(CGPoint(x: 62.73, y: 51.41))
        starPath.addLineToPoint(CGPoint(x: 68.86, y: 80.6))
        starPath.addLineToPoint(CGPoint(x: 43, y: 65.75))
        starPath.addLineToPoint(CGPoint(x: 17.14, y: 80.6))
        starPath.addLineToPoint(CGPoint(x: 23.27, y: 51.41))
        starPath.addLineToPoint(CGPoint(x: 1.15, y: 31.4))
        starPath.addLineToPoint(CGPoint(x: 30.81, y: 28.22))
        starPath.closePath()
        black.setFill()
        starPath.fill()
        
        CGContextRestoreGState(context)

    }




    @objc public enum ResizingBehavior: Int {
        case AspectFit /// The content is proportionally resized to fit into the target rectangle.
        case AspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case Stretch /// The content is stretched to match the entire target rectangle.
        case Center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .AspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .AspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .Stretch:
                    break
                case .Center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
